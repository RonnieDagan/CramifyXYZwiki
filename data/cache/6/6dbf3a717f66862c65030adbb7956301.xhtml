
<h1 class="sectionedit1" id="ap_csa_study_guide">AP CSA Study Guide</h1>
<div class="level1">

<p>
Curly brackets alignment is a bit janky, not fully accurate but it shouldnt affect consumibility of notes
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;AP CSA Study Guide&quot;,&quot;hid&quot;:&quot;ap_csa_study_guide&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:1,&quot;range&quot;:&quot;1-140&quot;} -->
<h2 class="sectionedit2" id="unit_1_primitive_types">Unit 1 – Primitive Types</h2>
<div class="level2">

<p>
<strong>From Simple Studies:</strong> <strong><a href="https://simplestudies.edublogs.org/" class="urlextern" target="_blank" title="https://simplestudies.edublogs.org/" rel="ugc nofollow noopener">https://simplestudies.edublogs.org</a></strong> <strong>&amp;</strong>
</p>

<p>
<strong>@simplestudiesinc on Instagram</strong>
</p>

<p>
Primitive Types
</p>

<p>
<strong>Learning Objectives</strong>
</p>
<ul>
<li class="level1"><div class="li"> System class methods print output to the console.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> String literals</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Primitive Data Types</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Declaring variables to different data types</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Use of arithmetic expressions in a program</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Data stored in variables</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Assignment Statements</div>
</li>
</ul>

<p>
<strong>Why Programming? Why Java?</strong>
</p>
<ul>
<li class="level1"><div class="li"> Programming Languages: a language used to write instructions that can be executed by a computer</div>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Instructions in a computer program are known as the code.</div>
<ol>
<li class="level2"><div class="li"> The instructions written for a computer to execute is a program.</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Machine Code: a set of instructions composed of 1s and 0s the computer can execute without any translation</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> High-Level Languages: translate human messages into machine code that the computer can understand</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> An interface allows communication between humans and computers.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Source Codes: program code written in a high-level language before being translated into machine code</div>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Java is a high-level language and it’s easier for programmers to learn and use.</div>
<ol>
<li class="level2"><div class="li"> User friendly</div>
</li>
<li class="level2"><div class="li"> Can use on different kinds of hardware</div>
</li>
<li class="level2 node"><div class="li"> Run slower than the lower-level languages</div>
<ol>
<li class="level3"><div class="li"> Must be translated to machine code</div>
</li>
</ol>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Java is one of the most common modern computer languages</div>
<ol>
<li class="level2"><div class="li"> It is used for web applications and software development</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> This programming language was developed by James Gosling and a group of people at Sun Microsystems in California.</div>
</li>
</ul>

<p>
<strong>Variables and Data Types</strong>
</p>
<ul>
<li class="level1"><div class="li"> Variable</div>
</li>
</ul>
<ol>
<li class="level1 node"><div class="li"> a group of characters whose value can be changed as needed</div>
<ol>
<li class="level2"><div class="li"> Stores data in RAM (Random Access Memory)</div>
</li>
</ol>
<ul>
<li class="level2 node"><div class="li"> Identifier: A name for a parameter, variable, user-defined method, constant or user-define class.</div>
<ol>
<li class="level3"><div class="li"> A sequence of digits, letters, and the underscore.</div>
</li>
</ol>
</li>
</ul>
</li>
</ol>
<ol>
<li class="level1 node"><div class="li"> Can’t begin with a digit.</div>
<ol>
<li class="level2 node"><div class="li"> Case-sensitive</div>
<ul>
<li class="level3"><div class="li"> Lowercase when naming identifiers for variables and methods.</div>
</li>
<li class="level3"><div class="li"> Uppercase letters are used to separate words.</div>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> Rules you must follow when naming Variables</div>
<ol>
<li class="level2 node"><div class="li"> Do</div>
<ul>
<li class="level3"><div class="li"> Begin variable names with a letter or underscore. (Ex: song, songTitle)</div>
</li>
<li class="level3"><div class="li"> After the first letter, the variable name can consist of additional letters or digits (0 to 9).</div>
</li>
</ul>
</li>
<li class="level2 node"><div class="li"> Do Not</div>
<ul>
<li class="level3"><div class="li"> Variable names should not be a Python keyword.</div>
</li>
<li class="level3"><div class="li"> Variable names can’t have spaces.</div>
</li>
<li class="level3"><div class="li"> Variable names can’t have any punctuation.</div>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Final variable</div>
<ol>
<li class="level2"><div class="li"> User-defined constant (uses keyword final)</div>
</li>
<li class="level2 node"><div class="li"> Can’t change the value of the variable</div>
<ol>
<li class="level3 node"><div class="li"> Example:</div>
<ul>
<li class="level4"><div class="li"> final double CLASS_SIZE = 28;</div>
</li>
</ul>
</li>
</ol>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Make sure you use camelCase in Java (for variables/new instances)</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Non-numeric data: a string which consists of a combination of letters, numbers, and/or symbols. This type of data can’t be used in calculations.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Numeric data: numerical value that can be used in calculations.</div>
</li>
</ul>

<p>
<strong>Variables and Data Types (continued)</strong>
</p>
<ul>
<li class="level1"><div class="li"> Built-in Types</div>
</li>
</ul>
<ol>
<li class="level1 node"><div class="li"> int: refers to an integer</div>
<ul>
<li class="level2"><div class="li"> positive, negative whole numbers (including 0)</div>
</li>
</ul>
</li>
</ol>
<ol>
<li class="level1 node"><div class="li"> Boolean: a logic which evaluates whether a condition is true or false.</div>
<ol>
<li class="level2 node"><div class="li"> Double: decimals (floating-point numbers)</div>
<ul>
<li class="level3"><div class="li"> Uses 8 bytes</div>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> float: refers to “floating point numbers”. These numbers have a decimal point.</div>
<ul>
<li class="level2"><div class="li"> positive, negative numbers, including 0.0</div>
</li>
<li class="level2"><div class="li"> Uses 4 bytes</div>
</li>
</ul>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> String: Sequence of letters, numbers, spaces, and symbols, or alphanumeric info.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Boolean: a logic which evaluates whether a condition is true or false.</div>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Floating-point numbers</div>
<ol>
<li class="level2"><div class="li"> Stored in two parts (a mantissa and an exponent)</div>
</li>
</ol>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Mantissa: Digits of the number</div>
</li>
</ol>

<p>
<strong>Expressions and Assignment Statements</strong>
</p>
<ul>
<li class="level1 node"><div class="li"> Arithmetic expressions</div>
<ol>
<li class="level2"><div class="li"> Typically consist of parentheses, function calls, and operators</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Arithmetic Operators</div>
<ol>
<li class="level2"><div class="li"> + (addition)</div>
</li>
</ol>
</li>
</ul>
<blockquote><div class="no">
 o - (subtraction) o * (multiplication) o / (division) </div></blockquote>
<ul>
<li class="level1"><div class="li"> Ex: 20 % 8</div>
</li>
</ul>
<blockquote><div class="no">
 //returns 2 (NOT 2.5) o % (modulus) </div></blockquote>
<ul>
<li class="level1"><div class="li"> Gives you the remainder</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Ex: 11 % 3 //returns 2</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Assignment Statement: statement which assigns values to variables</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> These assignment operators can be applied to the primitive data types int and double. o Even if both of the data types are in the same expression</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Integer division (divisor and dividend are both integers) results in an integer output/quotient.</div>
</li>
</ul>
<blockquote><div class="no">
 o You can control the type (int or double) of output by casting the operands.</div></blockquote>
<ul>
<li class="level1"><div class="li"> Example: (int) 6.0/8 = 0 (double) 6/8 = 0.75</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Constant identifiers are capitalized.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> A common use of a constant or final variable is arrays.</div>
</li>
</ul>

<p>
<strong>Expressions and Assignment Statements (continued)</strong>
</p>
<ul>
<li class="level1"><div class="li"> Relational Operators o == (equal to)</div>
</li>
</ul>
<blockquote><div class="no">
 o != (not equal to) o &gt; (greater than) o &lt; (less than) o &gt;= (greater than or equal to) o ⇐ (less than or equal to) </div></blockquote>
<ul>
<li class="level1"><div class="li"> Logical Operators</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> ! (NOT)</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> &amp;&amp; (AND)</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> | | (OR)</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Applied to Boolean expressions (for compound Boolean expressions)</div>
</li>
</ol>
<ul>
<li class="level1"><div class="li"> To evaluate true or false</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> True or false values are assigned based on the result of a truth table for these logical operators.</div>
</li>
</ol>

<p>
<strong>Compound Assignment Operators</strong>
</p>
<ul>
<li class="level1"><div class="li"> = (simple assignment)</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Compound Assignment Operators o +=</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> x += 5 or x = x + 5</div>
</li>
</ul>
<ol>
<li class="level1 node"><div class="li"> – =</div>
<ul>
<li class="level2"><div class="li"> x -= 7 or x = x - 7</div>
</li>
</ul>
</li>
</ol>
<ol>
<li class="level1 node"><div class="li"> =</div>
<ul>
<li class="level2"><div class="li"> x *= 9 or x = x * 9</div>
</li>
</ul>
</li>
</ol>
<ol>
<li class="level1 node"><div class="li"> /=</div>
<ul>
<li class="level2"><div class="li"> x /= 10 or x = x / 10</div>
</li>
</ul>
</li>
</ol>
<ol>
<li class="level1 node"><div class="li"> %=</div>
<ul>
<li class="level2"><div class="li"> x %= 4 or x = x % 4</div>
</li>
<li class="level2"><div class="li"> Increment and Decrement Operators o ++</div>
</li>
<li class="level2"><div class="li"> i++ or ++i</div>
</li>
<li class="level2"><div class="li"> i is incremented by 1</div>
</li>
</ul>
</li>
</ol>
<ol>
<li class="level1 node"><div class="li"> –</div>
<ul>
<li class="level2"><div class="li"> j++ or ++j</div>
</li>
<li class="level2"><div class="li"> j is decremented by 1</div>
</li>
<li class="level2"><div class="li"> Operator Precedence</div>
</li>
</ul>
</li>
</ol>
<ol>
<li class="level1 node"><div class="li"> Highest Precedence</div>
<ul>
<li class="level2"><div class="li"> !. ++. –</div>
</li>
<li class="level2"><div class="li"> ,/,%</div>
</li>
<li class="level2"><div class="li"> &gt;, &lt;, &gt;=, ⇐</div>
</li>
<li class="level2"><div class="li"> ==, !=</div>
</li>
<li class="level2"><div class="li"> &amp;&amp;</div>
</li>
<li class="level2"><div class="li"> | |</div>
</li>
</ul>
</li>
</ol>

<p>
<strong>Compound Assignment Operators (continued)</strong>
</p>
<ol>
<li class="level1 node"><div class="li"> Lowest Precedence</div>
<ul>
<li class="level2"><div class="li"> Simple Assignment</div>
</li>
<li class="level2"><div class="li"> Compound Assignment Operators</div>
</li>
</ul>
</li>
</ol>

<p>
<strong>Input and Output</strong>
</p>
<ul>
<li class="level1"><div class="li"> Input</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> double x = Call method which reads a floating-point number</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> double x = …;</div>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> Read user input</div>
<ol>
<li class="level2"><div class="li"> Scanner Class – simplifies the console and the input</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Output</div>
<ol>
<li class="level2"><div class="li"> System.out.print</div>
</li>
</ol>
</li>
</ul>
<blockquote><div class="no">
 o System.out.println</div></blockquote>
<ol>
<li class="level1"><div class="li"> System class – displays output to the screen.</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> print method outputs items without going to a new line while println does print the output on the next line.</div>
</li>
</ol>

<p>
<strong>Example Practice Questions:</strong>
</p>
<ol>
<li class="level1 node"><div class="li"> Which of the following data types is not primitive?</div>
<ol>
<li class="level2"><div class="li"> Long</div>
</li>
<li class="level2"><div class="li"> Integer</div>
</li>
<li class="level2"><div class="li"> String</div>
</li>
<li class="level2"><div class="li"> Boolean</div>
</li>
</ol>
</li>
</ol>
<ol>
<li class="level1 node"><div class="li"> A value can’t be changed if a variable is declared ________.</div>
<ol>
<li class="level2"><div class="li"> final</div>
</li>
<li class="level2"><div class="li"> private</div>
</li>
<li class="level2"><div class="li"> boolean</div>
</li>
<li class="level2"><div class="li"> constant</div>
</li>
</ol>
</li>
</ol>
<blockquote><div class="no">
 Answer: A final dataType name = value </div></blockquote>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Unit 1 \u2013 Primitive Types&quot;,&quot;hid&quot;:&quot;unit_1_primitive_types&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:2,&quot;range&quot;:&quot;141-6691&quot;} -->
<h2 class="sectionedit3" id="unit_2_using_objects">Unit 2 – Using Objects</h2>
<div class="level2">

<p>
<strong>From Simple Studies:</strong> <strong><a href="https://simplestudies.edublogs.org/" class="urlextern" target="_blank" title="https://simplestudies.edublogs.org/" rel="ugc nofollow noopener">https://simplestudies.edublogs.org</a></strong> <strong>&amp;</strong>
</p>

<p>
<strong>@simplestudiesinc on Instagram</strong>
</p>

<p>
Using Objects
</p>

<p>
<strong>Objects: Instances of Classes</strong>
</p>
<ul>
<li class="level1"><div class="li"> Object – characterized by state, attributes, and behavior. o Instance of a class</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> All OOP (Object-Oriented Programming) languages try to represent an object as a variable or an instance in a program.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Class – Software blueprint</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Implement Objects of a specific data type</div>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> Data fields –</div>
<ol>
<li class="level2"><div class="li"> Also known as instance variables</div>
</li>
<li class="level2 node"><div class="li"> Methods</div>
<ul>
<li class="level3"><div class="li"> Provide behaviors of the object</div>
</li>
<li class="level3"><div class="li"> Provide operations which manipulate the object</div>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Encapsulation – Combining data and method into a single unit</div>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Public</div>
<ol>
<li class="level2"><div class="li"> Class declaration which suggests that the class can be used by all client programs</div>
</li>
</ol>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Public methods – any client program can access these methods</div>
</li>
</ol>

<p>
<strong>Objects: Instances of Classes (continued)</strong>
</p>
<ul>
<li class="level1"><div class="li"> Private</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Information hiding in Java – restricting access to data and methods</div>
</li>
</ol>
<ol>
<li class="level1 node"><div class="li"> Private methods and variables – Only accessible by methods from that class</div>
<ol>
<li class="level2"><div class="li"> Java does allow public instance variables but we only have private instance variables in the AP Java Subset.</div>
</li>
</ol>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> Static</div>
<ol>
<li class="level2 node"><div class="li"> Static variable – class variable</div>
<ul>
<li class="level3"><div class="li"> Shared through all instances of a class</div>
</li>
<li class="level3"><div class="li"> Static – the memory allocation can only occur once</div>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<ol>
<li class="level1 node"><div class="li"> Uses of a static variable</div>
<ul>
<li class="level2"><div class="li"> Accumulation of a total</div>
</li>
<li class="level2"><div class="li"> Providing a new identity for each instance or object in a class</div>
</li>
<li class="level2"><div class="li"> Keeping track of data of the objects in a class</div>
</li>
</ul>
</li>
</ol>
<ol>
<li class="level1 node"><div class="li"> Static final variable (also known as constant)</div>
<ul>
<li class="level2"><div class="li"> Cannot be changed</div>
</li>
<li class="level2"><div class="li"> Often declared as public</div>
</li>
<li class="level2"><div class="li"> Keyword static indicates that the single value applies to the entire class and not just a new instance for an object in the class.</div>
</li>
</ul>
</li>
</ol>

<p>
<strong>Methods</strong>
</p>
<ul>
<li class="level1"><div class="li"> Method headers look like this:</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Except constructors and static methods</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> public void deposit (String password, double amount) o public – access specifier</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> void – return type</div>
</li>
</ol>
<ol>
<li class="level1 node"><div class="li"> withdraw – method name</div>
<ol>
<li class="level2"><div class="li"> (Strong password, double amount)- list of parameters</div>
</li>
</ol>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> Types of methods:</div>
<ol>
<li class="level2"><div class="li"> Instance methods</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Constructors, accessors, and mutators</div>
</li>
</ul>
<ol>
<li class="level1 node"><div class="li"> Constructors</div>
<ul>
<li class="level2"><div class="li"> Creates an object or a new instance of the class</div>
</li>
<li class="level2 node"><div class="li"> Default constructor – No arguments</div>
<ul>
<li class="level3"><div class="li"> Provides initial values for each new object</div>
</li>
</ul>
</li>
<li class="level2"><div class="li"> Constructor with parameters have instance variables set to the values of the parameters.</div>
</li>
<li class="level2"><div class="li"> Object variables store the values and addresses of their respective objects.</div>
</li>
</ul>
</li>
</ol>
<ol>
<li class="level1 node"><div class="li"> Accessors</div>
<ul>
<li class="level2"><div class="li"> Access a class object without modifying an object</div>
</li>
<li class="level2"><div class="li"> Returns information about the object</div>
</li>
<li class="level2"><div class="li"> . (dot) operator signals a method of a class</div>
</li>
</ul>
</li>
</ol>
<ol>
<li class="level1 node"><div class="li"> Mutators</div>
<ul>
<li class="level2"><div class="li"> Alters the state of an object</div>
</li>
<li class="level2"><div class="li"> Changes at least one of the instance variables of the object</div>
</li>
<li class="level2"><div class="li"> Invoked similar to an accessor in a client program</div>
</li>
</ul>
</li>
</ol>

<p>
<strong>Methods (continued)</strong>
</p>
<ol>
<li class="level1 node"><div class="li"> Static Methods</div>
<ul>
<li class="level2"><div class="li"> Performs an operation for the whole class</div>
</li>
<li class="level2"><div class="li"> Not individual objects</div>
</li>
<li class="level2"><div class="li"> Sometimes known as a class method</div>
</li>
</ul>
</li>
</ol>
<ol>
<li class="level1 node"><div class="li"> Static methods vs. Instance methods</div>
<ul>
<li class="level2"><div class="li"> Static methods use the keyword static for its implementation.</div>
</li>
<li class="level2"><div class="li"> No implied objects in static method (there is in instance methods)</div>
</li>
<li class="level2"><div class="li"> A static method can use a static variable in the code.</div>
</li>
</ul>
</li>
</ol>
<ul>
<li class="level1"><div class="li"> Method Overloading</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Overloaded methods are two or more methods which are in the same class and have the same name but different inputs or parameter lists</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Compiler decides which method to call by looking at the method’s signature</div>
</li>
</ol>
<ol>
<li class="level1 node"><div class="li"> Method signature – consists of method’s name, parameter types</div>
<ol>
<li class="level2 node"><div class="li"> Return type is irrelevant for overloaded methods</div>
<ul>
<li class="level3"><div class="li"> Two methods can have similar method signatures but not different return types (compiler will give you an error)</div>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> Scope</div>
<ol>
<li class="level2"><div class="li"> Scope of a variable or method means that it’s in an area where the identifier is</div>
</li>
</ol>
</li>
</ul>
<blockquote><div class="no">
 visible and can be easily accessed</div></blockquote>
<ol>
<li class="level1 node"><div class="li"> What does a scope consist of?</div>
<ul>
<li class="level2"><div class="li"> Instance variables</div>
</li>
<li class="level2"><div class="li"> Static variables</div>
</li>
<li class="level2"><div class="li"> Methods of a class</div>
</li>
</ul>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> From the opening brace to the closing brace of a class.</div>
</li>
</ol>

<p>
<strong>Methods (continued)</strong>
</p>
<ul>
<li class="level1"><div class="li"> Local method</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Inside a method</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Can be defined in a statement</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Scope extends from the beginning to the end of the block it is defined in</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Block – code enclosed in {}</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> The memory of a local variable or method is recycled when a block is exited</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Higher precedence over instance variables</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Using same names creates ambiguity for programmers and coders (Leads to more errors)</div>
</li>
</ol>

<p>
<strong>String Objects: Concatenation, Literals, and More</strong>
</p>
<ul>
<li class="level1"><div class="li"> String – an object of this type is just a sequence of characters.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> All string literals are implemented as instances of a class.</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> String literals have zero or more characters in them.</div>
</li>
</ol>
<ol>
<li class="level1 node"><div class="li"> Can also include escape sequences</div>
<ol>
<li class="level2 node"><div class="li"> String literals are surrounded by double quotes.</div>
<ul>
<li class="level3"><div class="li"> Quotes are not part of the string object.</div>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> String Objects – immutable</div>
<ol>
<li class="level2"><div class="li"> No methods can change them after they are constructed</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> You can create a new String object which can be a modified form of an existing String object.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> String objects can be initialized like a primitive data type.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Concatenation operator (+)</div>
</li>
</ul>
<ol>
<li class="level1 node"><div class="li"> Used on String objects</div>
<ol>
<li class="level2"><div class="li"> Allows you to combine two or more String operands</div>
</li>
</ol>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> Characters in the String objects</div>
<ol>
<li class="level2"><div class="li"> Compared based on their position in the <abbr title="American Standard Code for Information Interchange">ASCII</abbr> chart.</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Don’t use (=<img src="/dokuwiki/lib/images/smileys/smile2.svg" class="icon smiley" alt="=)" /> for testing or comparing String Objects.</div>
</li>
</ul>

<p>
<strong>String Methods</strong>
</p>
<ul>
<li class="level1"><div class="li"> String objects can be initialized like a primitive data type.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Two ways to compare String objects:</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Using the equals method</div>
</li>
</ol>
<ul>
<li class="level1"><div class="li"> If (string1.equals(string2))…</div>
</li>
</ul>
<ol>
<li class="level1 node"><div class="li"> Using the compareTo method</div>
<ul>
<li class="level2"><div class="li"> Int compareTo (string otherStringYouAreComparing)</div>
</li>
<li class="level2 node"><div class="li"> stringOne. compareTo (stringTwo) &lt; 0</div>
<ul>
<li class="level3"><div class="li"> stringOne precedes stringTwo in a dictionary</div>
</li>
</ul>
</li>
<li class="level2 node"><div class="li"> stringOne. compareTo (stringTwo) &gt; 0</div>
<ul>
<li class="level3"><div class="li"> stringTwo precedes stringOne in a dictionary</div>
</li>
</ul>
</li>
<li class="level2 node"><div class="li"> stringOne. compareTo (stringTwo) == 0</div>
<ul>
<li class="level3"><div class="li"> both Strings are identical</div>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> REMEMBER THAT JAVA IS CASE-SENSITIVE!</div>
</li>
</ol>

<p>
<strong>Wrapper Classes: Integer and Double</strong>
</p>
<ul>
<li class="level1"><div class="li"> Integer Class</div>
</li>
</ul>
<ol>
<li class="level1 node"><div class="li"> This wraps a value of int type in any object</div>
<ol>
<li class="level2"><div class="li"> Only contains one instance variable with the type int</div>
</li>
<li class="level2 node"><div class="li"> Int methods you should know for the exam</div>
<ul>
<li class="level3 node"><div class="li"> Integer (int value)</div>
<ul>
<li class="level4"><div class="li"> To construct an integer</div>
</li>
</ul>
</li>
<li class="level3"><div class="li"> int compareTo (Integer other)</div>
</li>
<li class="level3"><div class="li"> int intValue()</div>
</li>
<li class="level3 node"><div class="li"> boolean equals (Object obj)</div>
<ul>
<li class="level4"><div class="li"> Overrides equals in class Object.</div>
</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> Double Class</div>
<ol>
<li class="level2"><div class="li"> This wraps a value of double type in any object</div>
</li>
</ol>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> double (double value) o double doubleValue()</div>
</li>
</ol>
<blockquote><div class="no">
 o int compareTo (Double other)</div></blockquote>
<ol>
<li class="level1"><div class="li"> boolean equals (Object obj) o String toString()</div>
</li>
</ol>
<ul>
<li class="level1"><div class="li"> Both Integer and Double objects contain no mutator methods in their classes.</div>
</li>
</ul>

<p>
<strong>Using the Math Class</strong>
</p>
<ul>
<li class="level1"><div class="li"> Methods you need to know in the Math Class o static int abs(int x)</div>
</li>
</ul>
<blockquote><div class="no">
 o static double abs(double x) o static double pow(double base, double exp) o static double sqrt(double x) o static double random() </div></blockquote>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Unit 2 \u2013 Using Objects&quot;,&quot;hid&quot;:&quot;unit_2_using_objects&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:3,&quot;range&quot;:&quot;6692-13707&quot;} -->
<h2 class="sectionedit4" id="unit_3_boolean_expressions">Unit 3 – Boolean Expressions</h2>
<div class="level2">

<p>
<strong>From Simple Studies:</strong> <strong><a href="https://simplestudies.edublogs.org/" class="urlextern" target="_blank" title="https://simplestudies.edublogs.org/" rel="ugc nofollow noopener">https://simplestudies.edublogs.org</a></strong> <strong>&amp;</strong>
</p>

<p>
<strong>@simplestudiesinc on Instagram</strong>
</p>

<p>
Boolean Expressions
</p>

<p>
<strong>Boolean Expressions</strong>
</p>
<ul>
<li class="level1"><div class="li"> Boolean logic: answers can be true or false (no middle ground)</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> George Boole</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Inventor of the concept of Boolean logic</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> He also developed the idea of what computers can use to make decisions – condition statements.</div>
</li>
</ol>

<p>
<strong>if Statements and Control Flow</strong>
</p>
<ul>
<li class="level1"><div class="li"> An if statement tells the computer that if a condition is true, then it should execute the block of code within the function.</div>
</li>
</ul>
<blockquote><div class="no">
 o Most basic control flow statement o If it’s false, the computer should skip the code and continue with the rest of the program. </div></blockquote>
<ul>
<li class="level1"><div class="li"> Control flow statements</div>
</li>
</ul>
<ol>
<li class="level1 node"><div class="li"> Can modify or break the flow of the execution</div>
<ul>
<li class="level2"><div class="li"> Implementing decision making</div>
</li>
<li class="level2"><div class="li"> Looping</div>
</li>
<li class="level2"><div class="li"> Branching program</div>
</li>
</ul>
<ol>
<li class="level2"><div class="li"> To execute certain blocks of code in your program.</div>
</li>
</ol>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> Switch statements</div>
<ol>
<li class="level2"><div class="li"> Can test a range of values</div>
</li>
</ol>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Can use these statements if the if-else chain is too long.</div>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> Three types of control flow supported by Java</div>
<ol>
<li class="level2 node"><div class="li"> Decision making statements</div>
<ul>
<li class="level3"><div class="li"> if – then</div>
</li>
<li class="level3"><div class="li"> if – then – else</div>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<ol>
<li class="level1 node"><div class="li"> Looping statements</div>
<ul>
<li class="level2"><div class="li"> for</div>
</li>
<li class="level2"><div class="li"> while</div>
</li>
<li class="level2"><div class="li"> do-while</div>
</li>
</ul>
</li>
</ol>
<ol>
<li class="level1 node"><div class="li"> Branching statements</div>
<ul>
<li class="level2"><div class="li"> break</div>
</li>
<li class="level2"><div class="li"> return</div>
</li>
<li class="level2"><div class="li"> continue</div>
</li>
</ul>
</li>
</ol>

<p>
<strong>if-else Statements</strong>
</p>
<ul>
<li class="level1"><div class="li"> if-else statements</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> If the condition is true, the computer executes the block of code but if the condition is false, the computer executes the else action.</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Will always take some action because the condition has to be either true or false (not in the middle).</div>
</li>
</ol>
<ol>
<li class="level1 node"><div class="li"> Optional else statement</div>
<ul>
<li class="level2"><div class="li"> Alternate path if the boolean value might be false</div>
</li>
</ul>
</li>
</ol>

<p>
<strong>else-if Statements</strong>
</p>
<ul>
<li class="level1"><div class="li"> if-else-if statements</div>
</li>
</ul>
<ol>
<li class="level1 node"><div class="li"> In Java, once a block of code is executed, it doesn’t check for the other else-if conditions</div>
<ul>
<li class="level2"><div class="li"> Breaks the loop</div>
</li>
</ul>
</li>
</ol>

<p>
<strong>Equivalent Boolean Expressions</strong>
</p>
<ul>
<li class="level1"><div class="li"> De Morgan’s Laws</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> not (a and b) → (not a) or (not b)</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> not (a or b) → (not a) and (not b)</div>
</li>
</ol>
<ul>
<li class="level1"><div class="li"> How De Morgan’s Laws are expressed in programming languages! o !(a &amp;&amp; b) is equivalent to !a || !b</div>
</li>
</ul>
<blockquote><div class="no">
 o !(a || b) is equivalent to !a &amp;&amp; !b</div></blockquote>
<ul>
<li class="level1"><div class="li"> Negating boolean expressions</div>
</li>
</ul>
<ol>
<li class="level1 node"><div class="li"> You can do this with relational operators</div>
<ol>
<li class="level2"><div class="li"> &lt;, &gt;, or ==</div>
</li>
</ol>
</li>
</ol>
<ul>
<li class="level1"><div class="li"> Truth Tables are used to prove boolean expressions.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Equivalent boolean expressions result in the same value in any case.</div>
</li>
</ul>

<p>
<strong>Comparing Objects</strong>
</p>
<ul>
<li class="level1"><div class="li"> Object – characterized by state, attributes, and behavior. o Instance of a class</div>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Class – Software blueprint</div>
<ol>
<li class="level2"><div class="li"> Implement Objects of a specific data type</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Methods</div>
</li>
</ul>
<ol>
<li class="level1 node"><div class="li"> Provide behaviors of the object</div>
<ol>
<li class="level2"><div class="li"> Provide operations which manipulate the object</div>
</li>
</ol>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> Comparing String Objects</div>
<ol>
<li class="level2"><div class="li"> Using the equals method</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> If (string1.equals(string2))…</div>
</li>
</ul>
<ol>
<li class="level1 node"><div class="li"> Using the compareTo method</div>
<ul>
<li class="level2"><div class="li"> Int compareTo (string otherStringYouAreComparing)</div>
</li>
<li class="level2 node"><div class="li"> stringOne. compareTo (stringTwo) &lt; 0</div>
<ul>
<li class="level3"><div class="li"> stringOne precedes stringTwo in a dictionary</div>
</li>
</ul>
</li>
<li class="level2 node"><div class="li"> stringOne. compareTo (stringTwo) &gt; 0</div>
<ul>
<li class="level3"><div class="li"> stringTwo precedes stringOne in a dictionary</div>
</li>
</ul>
</li>
<li class="level2 node"><div class="li"> stringOne. compareTo (stringTwo) == 0</div>
<ul>
<li class="level3"><div class="li"> both Strings are identical</div>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> String Objects – immutable</div>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> No methods can change them after they are constructed</div>
<ol>
<li class="level2"><div class="li"> You can create a new String object which can be a modified form of an existing String object.</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Characters in the String objects</div>
<ol>
<li class="level2"><div class="li"> Compared based on their position in the <abbr title="American Standard Code for Information Interchange">ASCII</abbr> chart.</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Don’t use (=<img src="/dokuwiki/lib/images/smileys/smile2.svg" class="icon smiley" alt="=)" /> for testing or comparing String Objects.</div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Unit 3 \u2013 Boolean Expressions&quot;,&quot;hid&quot;:&quot;unit_3_boolean_expressions&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:4,&quot;range&quot;:&quot;13708-17244&quot;} -->
<h2 class="sectionedit5" id="unit_4_iteration">Unit 4 – Iteration</h2>
<div class="level2">

<p>
<strong>From Simple Studies:</strong> <strong><a href="https://simplestudies.edublogs.org/" class="urlextern" target="_blank" title="https://simplestudies.edublogs.org/" rel="ugc nofollow noopener">https://simplestudies.edublogs.org</a></strong> <strong>&amp;</strong>
</p>

<p>
<strong>@simplestudiesinc on Instagram</strong>
</p>

<p>
Iteration
</p>

<p>
<strong>while Loops and for Loops</strong>
</p>
<ul>
<li class="level1"><div class="li"> for loop vs. while loop</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> for loops repeat for a range of values</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> while loops repeat when a condition is true/met</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> for loops have a start value for the loop variables</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> for loop can be best when you know how many times to repeat the code</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> while loops can be best when you don’t know how many times to repeat the code</div>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> Similarities between for loops and while loops</div>
<ol>
<li class="level2"><div class="li"> Repeats code</div>
</li>
<li class="level2"><div class="li"> Loop stops once the condition is false</div>
</li>
</ol>
</li>
</ul>
<blockquote><div class="no">
  * Example of a while loop</div></blockquote>
<pre class="code"> public class Test { public static void main(String[] args) </pre>

<p>
{ 
</p>
<pre class="code">int x = 10; 
while (x &gt; 0) </pre>

<p>
{
</p>
<pre class="code">System.out.println(x); x = x - 2; 
  } 
} </pre>

<p>
} 
</p>

<p>
<strong>while Loops and for Loops (continued)</strong>
</p>
<ul>
<li class="level1"><div class="li"> Example of a for loop</div>
</li>
</ul>
<blockquote><div class="no">
 public class Test {<pre class="code">   public static void main(String[] args) {
      for (int x = 3; x &gt; 0; x--) 
       { 
         System.out.println(x); 
       } 
      } 
 } </pre>
</div></blockquote>

<p>
  * Body of the loops
</p>
<ol>
<li class="level1"><div class="li"> A single statement after “while” or “for”</div>
</li>
</ol>
<blockquote><div class="no">
 OR</div></blockquote>
<ol>
<li class="level1"><div class="li"> Block of code between the opening and closing curly braces.</div>
</li>
</ol>

<p>
<strong>Developing Algorithms Using Strings</strong>
</p>
<ul>
<li class="level1"><div class="li"> Loops are usually incorporated in: o String traversals</div>
</li>
</ul>
<blockquote><div class="no">
 o String processing</div></blockquote>
<ol>
<li class="level1"><div class="li"> The code processes a string by each character.</div>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> First character in a Java String ALWAYS starts with the index 0</div>
<ol>
<li class="level2"><div class="li"> Last character: length() – 1</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> String methods that are often used:</div>
<ol>
<li class="level2"><div class="li"> int length()</div>
</li>
</ol>
</li>
</ul>
<blockquote><div class="no">
 o int indexOf(String Str)</div></blockquote>
<ol>
<li class="level1"><div class="li"> String substring (int from, int to)</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> String substring (int from)</div>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> Standard algorithms use String traversals to:</div>
<ol>
<li class="level2"><div class="li"> Find if the substrings have a certain property</div>
</li>
</ol>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Determine how many substrings meet the criteria</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Create new strings with the characters of an existing string reversed.</div>
</li>
</ol>

<p>
<strong>Nested Iteration</strong>
</p>
<ul>
<li class="level1"><div class="li"> Nested loops – a loop inside of another loop</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Used when working with two dimensions such as arrays and ArrayLists.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> The inner loop runs multiple times before the outer loop runs again.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Inner loop must finish all iterations before the outer loop can go onto the next iteration.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Example of a nested loop:</div>
</li>
</ul>
<blockquote><div class="no">
 public class NestedLoops </div></blockquote>

<p>
{ 
public static void main(String[] args) 
</p>
<pre class="code">{ 
for (int row = 1; row &lt;= 3; row++) 
  { 
  for (int col = 1; col &lt;= 5; col++) 
    { 
    System.out.print(&quot;*&quot;); 
      } 
      System.out.println(); </pre>

<p>
} 
</p>
<blockquote><div class="no">
 } } </div></blockquote>

<p>
<strong>Informal Code Analysis</strong>
</p>
<ul>
<li class="level1 node"><div class="li"> Trace tables – used to keep track of the variables</div>
<ol>
<li class="level2"><div class="li"> Keeps track of any values assigned in each iteration of the loop</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Statement Execution Count – determines how many times a block of code runs</div>
<ol>
<li class="level2"><div class="li"> Known as run-time analysis</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> largestValue – smallestValue + 1</div>
<ol>
<li class="level2"><div class="li"> Number of times a loop executes</div>
</li>
</ol>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Unit 4 \u2013 Iteration&quot;,&quot;hid&quot;:&quot;unit_4_iteration&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:5,&quot;range&quot;:&quot;17245-20136&quot;} -->
<h2 class="sectionedit6" id="unit_5_writing_classes">Unit 5 – Writing Classes</h2>
<div class="level2">

<p>
<strong>From Simple Studies:</strong> <strong><a href="https://simplestudies.edublogs.org/" class="urlextern" target="_blank" title="https://simplestudies.edublogs.org/" rel="ugc nofollow noopener">https://simplestudies.edublogs.org</a></strong> <strong>&amp;</strong>
</p>

<p>
<strong>@simplestudiesinc on Instagram</strong>
</p>

<p>
Writing Classes
</p>

<p>
<strong>Anatomy of a Class</strong>
</p>
<ul>
<li class="level1"><div class="li"> Object – characterized by state, attributes, and behavior. o Instance of a class</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> All OOP (Object-Oriented Programming) languages try to represent an object as a variable or an instance in a program.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Class – Defines another abstract data type in the program</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Object references</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> String variables</div>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> Instance Variables</div>
<ol>
<li class="level2"><div class="li"> Attributes and behaviors</div>
</li>
<li class="level2"><div class="li"> Hold data for objects</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Methods – Code for behaviors or any actions that apply to the objects.</div>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Constructors – Used to initialize the instance variables</div>
<ol>
<li class="level2"><div class="li"> When an object is created</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Main Methods – Used to test the class</div>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Instance variables</div>
<ol>
<li class="level2"><div class="li"> Attributes/behaviors</div>
</li>
</ol>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Fields</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Properties</div>
</li>
</ol>

<p>
<strong>Anatomy of a Class (continued)</strong>
</p>
<ul>
<li class="level1"><div class="li"> Types of methods: Accessor, constructors, and mutators</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Void return type – Indicates that the method doesn’t return any value or String object.</div>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Method names are always followed by parentheses.</div>
<ol>
<li class="level2"><div class="li"> Possible parameters should be indicated here.</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Example of a class: public class Name {</div>
</li>
</ul>
<blockquote><div class="no">
 private String first; </div></blockquote>

<p>
private String last; 
public Name(String theFirst, String theLast) 
</p>
<pre class="code">{ 
  first = theFirst; last = theLast; 
} </pre>
<blockquote><div class="no">
 }</div></blockquote>
<ul>
<li class="level1"><div class="li"> Keywords public and private are used for: o Classes</div>
</li>
</ul>
<blockquote><div class="no">
 o Data o Constructors o Methods </div></blockquote>

<p>
<strong>Constructors</strong>
</p>
<ul>
<li class="level1"><div class="li"> Constructors – used to set the initial value for an object o Or instance variables</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> When there is no constructor coded, Java includes a default constructor</div>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Default constructors don’t have any arguments.</div>
<ol>
<li class="level2 node"><div class="li"> Instance variables are set to a default value.</div>
<ul>
<li class="level3"><div class="li"> Int and double – 0</div>
</li>
<li class="level3"><div class="li"> Strings – null</div>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Constructor parameters are known as local variables to the constructor.</div>
<ol>
<li class="level2"><div class="li"> They also provide data to initialize instance variables.</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Classes often have multiple constructors.</div>
<ol>
<li class="level2"><div class="li"> A constructor which has no parameters</div>
</li>
</ol>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> A constructor with parameters needed for initializing any instance variables.</div>
</li>
</ol>

<p>
<strong>Documentation with Comments</strong>
</p>
<ul>
<li class="level1"><div class="li"> // - single line comment</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> /* */ - multiple line comment</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> /** */ - documentation comment</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> These comments help you remember any changes or additions to the program. o It is a good habit to develop for programmers.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> You can use the Java tool known as Javadoc for this.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Comments are ignored by the Java compiler.</div>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Preconditions</div>
<ol>
<li class="level2"><div class="li"> Condition must be true before the code is implemented.</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Postconditions</div>
<ol>
<li class="level2"><div class="li"> Should be true after a method is run</div>
</li>
<li class="level2 node"><div class="li"> Describes the output/outcome after the method is run</div>
<ul>
<li class="level3"><div class="li"> Can show any changes occurred to the instance variables</div>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> These conditions help determine the validity of the program/software.</div>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Software designers and programmers usually use this:</div>
<ol>
<li class="level2"><div class="li"> Use-case diagram system</div>
</li>
</ol>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Shows different ways a user can interact or use the program before its built</div>
</li>
</ol>

<p>
<strong>Documentation with Comments (continued)</strong>
</p>
<ul>
<li class="level1 node"><div class="li"> Example with both types of conditions /**</div>
<ul>
<li class="level2"><div class="li"> Constructor that takes the x and y position for the snake</div>
</li>
<li class="level2"><div class="li"> Preconditions: parameters x and y are coordinates from 0 to</div>
</li>
<li class="level2"><div class="li"> the width and height of the world.</div>
</li>
<li class="level2"><div class="li"> Postconditions: the snake is placed in (x,y) coordinates</div>
</li>
<li class="level2"><div class="li"> @param x the x position to place the snake</div>
</li>
<li class="level2"><div class="li"> @param y the y position to place the snake</div>
</li>
</ul>
</li>
</ul>
<blockquote><div class="no">
 */ public Snake(int x, int y) { xPos = x; yPos = y; } </div></blockquote>

<p>
<strong>Accessor Methods</strong>
</p>
<ul>
<li class="level1 node"><div class="li"> Also known as get methods or getters</div>
<ol>
<li class="level2"><div class="li"> How to get the value of an instance variable</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Return by value</div>
<ol>
<li class="level2"><div class="li"> Original value can’t be modified</div>
</li>
<li class="level2"><div class="li"> A way to access the instance variables of the class</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Non-void method returns only a single value.</div>
<ol>
<li class="level2"><div class="li"> The header has the return type instead of the keyword void</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Accessor methods return primitive types</div>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Return keyword/ expression</div>
<ol>
<li class="level2"><div class="li"> References an object</div>
</li>
<li class="level2 node"><div class="li"> Returns a copy of the reference</div>
<ul>
<li class="level3"><div class="li"> Not the original object</div>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> toString method</div>
<ol>
<li class="level2"><div class="li"> Overridden method</div>
</li>
</ol>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Incorporated in classes to show a description of the object</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Called when print statements are passed as objects</div>
</li>
</ol>

<p>
<strong>Mutator Methods</strong>
</p>
<ul>
<li class="level1 node"><div class="li"> Also known as a set methods or setters</div>
<ol>
<li class="level2"><div class="li"> Allows changes to the values of instance variables</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Void methods don’t return a value but they do take parameters for instance variables</div>
</li>
</ul>

<p>
<strong>Writing Methods</strong>
</p>
<ul>
<li class="level1"><div class="li"> Procedural Abstraction: Can name a method and call it whenever it’s needed o Creating methods</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Programmers break down larger programs into a smaller one.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> To write methods, you need a</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Method definition</div>
</li>
</ol>
<ol>
<li class="level1 node"><div class="li"> Method Signature</div>
<ol>
<li class="level2"><div class="li"> Method body</div>
</li>
</ol>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> Object.method()</div>
<ol>
<li class="level2"><div class="li"> To call an object’s method</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Actual parameters can be a primitive value or a reference to the object.</div>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Why should you use multiple methods in your code?</div>
<ol>
<li class="level2"><div class="li"> Organization and reducing complexity of the code</div>
</li>
</ol>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Reusing code</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Maintainability and debugging</div>
</li>
</ol>

<p>
<strong>Static Variables and Methods</strong>
</p>
<ul>
<li class="level1"><div class="li"> Static variables and methods use the keyword static. o Must be before header or declaration</div>
</li>
</ul>
<blockquote><div class="no">
 o Can be public or private</div></blockquote>
<ul>
<li class="level1"><div class="li"> Static variables</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Belong to class</div>
</li>
</ol>
<ol>
<li class="level1 node"><div class="li"> Objects share single static variables</div>
<ol>
<li class="level2"><div class="li"> Used with class name and dot operator</div>
</li>
</ol>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> Static methods</div>
<ol>
<li class="level2"><div class="li"> Associated with class</div>
</li>
</ol>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Cannot access or modify any values of the instance variables</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Can modify the values of static variables.</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Can’t call non-static methods</div>
</li>
</ol>

<p>
<strong>Scope and Access</strong>
</p>
<ul>
<li class="level1"><div class="li"> Scope of a variable – where a variable can be accessed or used o Determined by the declaration of the variable</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Java has 3 distinct levels of scope which are related to different types of variables o Class level scope</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Instance variables</div>
</li>
</ul>
<ol>
<li class="level1 node"><div class="li"> Method Level Scope</div>
<ul>
<li class="level2"><div class="li"> Local variables</div>
</li>
<li class="level2"><div class="li"> Parameter variables</div>
</li>
</ul>
<ol>
<li class="level2 node"><div class="li"> Block level scope</div>
<ul>
<li class="level3"><div class="li"> Loop variables</div>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<ul>
<li class="level1"><div class="li"> Formal parameters or variables should only be used within a constructor or method.</div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Unit 5 \u2013 Writing Classes&quot;,&quot;hid&quot;:&quot;unit_5_writing_classes&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:6,&quot;range&quot;:&quot;20137-26146&quot;} -->
<h2 class="sectionedit7" id="unit_6_array">Unit 6 – Array</h2>
<div class="level2">

<p>
<strong>From Simple Studies:</strong> <strong><a href="https://simplestudies.edublogs.org/" class="urlextern" target="_blank" title="https://simplestudies.edublogs.org/" rel="ugc nofollow noopener">https://simplestudies.edublogs.org</a></strong> <strong>&amp;</strong>
</p>

<p>
<strong>@simplestudiesinc on Instagram</strong>
</p>

<p>
Array
</p>

<p>
<strong>Array Creation and Access</strong>
</p>
<ul>
<li class="level1"><div class="li"> Arrays represent groups of related data all of the identical data type.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> The size of an array is established when created and cannot be modified.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Arrays can store either primitive data or object reference data.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> When an array is created using the keyword new, all of its elements are initialized with a specific value based on the type of elements:</div>
</li>
</ul>
<blockquote><div class="no">
 o Elements of type int are initialized to 0 o Elements of type double are initialized to 0.0 o Elements of type boolean are initialized to false o Elements of a reference type are initialized to the reference value null. No objects are automatically created. </div></blockquote>
<ul>
<li class="level1"><div class="li"> Square brackets ([ ]) are utilized to get to and adjust a component in an Array utilizing a list. The indexed value, for instance array[index], can be utilized anywhere a normal variable can be utilized, for instance to get or assign any values or variables.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> The valid index values for an array are 0 through one less than the size of the array. Utilizing a record and index value outside of this range will give you an ArrayIndexOutOfBoundsException.</div>
</li>
</ul>

<p>
<strong>Traversing Arrays</strong>
</p>
<ul>
<li class="level1"><div class="li"> Iteration (loops) can be utilized to get to all the components in an array, traversing through the array.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Traversing an array with an indexed for loop or while loop expects components to be accessed with their indices.</div>
</li>
</ul>
<blockquote><div class="no">
 public class OffByone <pre class="code">{ 
  public static void main(String[] args) 
    { 
       int[ ] scores = { 10, 9, 8, 7, 6}; </pre>
</div></blockquote>

<p>
  * Make this loop print out all the scores! for (int i = 1; i ⇐ scores.length; i++)
</p>
<blockquote><div class="no">
 { </div></blockquote>

<p>
System.out.println( scores[i] ); 
} 
</p>
<blockquote><div class="no">
 } } </div></blockquote>

<p>
<strong>Enhanced for Loop for Arrays</strong>
</p>
<ul>
<li class="level1"><div class="li"> Enhanced for Loop = for each loop</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Can be used in an array without specifying an index variable.</div>
</li>
</ol>

<p>
<strong>Developing Algorithms Using Arrays</strong>
</p>
<ul>
<li class="level1"><div class="li"> Determining the minimum or maximum value</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Computing a sum, average, or mode of elements</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Searching for an element in the array</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Insert elements in the ArrayList</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Delete elements in the ArrayList</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Determining whether there are duplicate/identical elements</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Changing the order of elements</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Reversing the order of elements</div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Unit 6 \u2013 Array&quot;,&quot;hid&quot;:&quot;unit_6_array&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:7,&quot;range&quot;:&quot;26147-28509&quot;} -->
<h2 class="sectionedit8" id="unit_7_array_list">Unit 7 – Array List</h2>
<div class="level2">

<p>
<strong>From Simple Studies:</strong> <strong><a href="https://simplestudies.edublogs.org/" class="urlextern" target="_blank" title="https://simplestudies.edublogs.org/" rel="ugc nofollow noopener">https://simplestudies.edublogs.org</a></strong> <strong>&amp;</strong>
</p>

<p>
<strong>@simplestudiesinc on Instagram</strong>
</p>

<p>
ArrayList
</p>

<p>
<strong>Introduction to ArrayList</strong>
</p>
<ul>
<li class="level1"><div class="li"> ArrayList are re-sizable groups that permit adding and expelling things to change their size during run time.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> The ArrayList class is in the java.util Java package. You should import java.util.* to utilize it.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> An ArrayList object contains object references and is variable, which means it can change (by including and expelling things from it).</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> The ArrayList constructor ArrayList() develops a vacant rundown of size 0.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Java permits the nonexclusive sort ArrayList&lt;E&gt;, where the conventional kind E determines the sort of the components, such as String or Integer. Without it, the sort will be Object.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> ArrayList&lt;E&gt; is favored over ArrayList since it permits the compiler to discover mistakes that would some way or another be found at run-time.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> When ArrayList&lt;E&gt; is indicated, the kinds of the reference boundaries and return type when utilizing its techniques are type E.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> ArrayLists can&#039;t hold primitive data types such as int or double, so you should utilize the wrapper classes Integer or Double to place numerical values into an ArrayList.</div>
</li>
</ul>

<p>
<strong>ArrayList Methods</strong>
</p>

<p>
int size() - returns number of elements in the list
</p>
<ul>
<li class="level1"><div class="li"> boolean add(E obj) - adds obj to the end of the list and returns true</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> E remove(int index) - removes the item at the index and shifts remaining items to the top</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> void add(int index, E obj) moves any current objects at index or beyond to the bottom (to a higher index) and inserts obj at the index specified</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> E get(int index) returns the item in the list at the index specified as a parameter.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> E set(int index, E obj) replaces item at an index with the object (obj)</div>
</li>
</ul>

<p>
<strong>Traversing ArrayLists</strong>
</p>
<ul>
<li class="level1"><div class="li"> ArrayLists can be traversed through an enhanced for each loop , or while/for loops by specifying an index.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Deleting components during a traversal of an ArrayList requires utilizing extraordinary techniques to abstain from skipping elements, since removing an element moves all the other elements.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Since the index of the first element in an ArrayList starts at 0 and the list ends at the with a value of elements − 1, accessing an index value outside of the given range of an ArrayList will give you an ArrayIndexOutOfBoundsException.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Modifying the size of an ArrayList while traversing it utilizing the enhanced for each loop will give us a ConcurrentModificationException being tossed. So, when utilizing enhanced for loop to traverse through an ArrayList, you can&#039;t add or remove any elements.</div>
</li>
</ul>

<p>
<strong>Developing Algorithms Using ArrayLists</strong>
</p>
<ul>
<li class="level1"><div class="li"> Determining the minimum or maximum value</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Computing a sum, average, or mode of elements</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Searching for an element in the array</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Insert elements in the ArrayList</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Delete elements in the ArrayList</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Determining whether there are duplicate/identical elements</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Changing the order of elements</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Reversing the order of elements</div>
</li>
</ul>

<p>
<strong>Searching</strong>
</p>
<ul>
<li class="level1"><div class="li"> Sequential/linear search algorithms check every component all together until the value is found or all components in the Array or ArrayList have been checked.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> The binary search algorithm begins at the center of a sorted array or ArrayList and disposes half of the Array or ArrayList in every iteration until the value is found or all the elements have been checked.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Data must be sorted for the binary search algorithm to work.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Casual run-time correlations of program code sections can be made utilizing statement execution counts.</div>
</li>
</ul>

<p>
<strong>Sorting</strong>
</p>
<ul>
<li class="level1"><div class="li"> Iterative sorting algorithms</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Used to sort elements in an ArrayList</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Selection Sort</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Insertion Sort</div>
</li>
</ol>

<p>
<strong>Ethical Issues Around Data Collection</strong>
</p>
<ul>
<li class="level1"><div class="li"> A programmer’s job isn’t done as soon as they write the program code. They also have to be able to maintain the program by keeping an eye out for accuracy of the code and security.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> The Code of Ethics and Professional Conduct is written by Association for Computing Machinery (ACM).</div>
</li>
</ul>
<blockquote><div class="no">
 o “Contribute to Society and human well-being.” o “Avoid harm to others.” o “Respect the privacy of others.” o “Give proper credit for intellectual property.” </div></blockquote>
<ol>
<li class="level1"><div class="li"> “Access computing and communication resources only when authorized to do so.”</div>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> These are some common ways of getting your information stolen.</div>
<ol>
<li class="level2"><div class="li"> Email scams: Scammers send you emails which make you respond with personal</div>
</li>
</ol>
</li>
</ul>
<blockquote><div class="no">
 information or click on certain dangerous links.</div></blockquote>
<ol>
<li class="level1"><div class="li"> Privacy settings: Privacy settings and the complexity of your passwords</div>
</li>
</ol>
<blockquote><div class="no">
 determines whether you are volunteering your personal information to be out there or keep your information safe.</div></blockquote>
<ol>
<li class="level1"><div class="li"> Sharing passwords: DO NOT share your password (even with your closest friends or partner).</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Dummy sites: Clicking on random pop-ups that are attractive might seem like a good idea until your personal information is stolen. Make sure you check for consistent copyright tags on each page if you are asked to navigate to any external links.</div>
</li>
</ol>

<p>
<strong>Ethical Issues Around Data Collection (continued)</strong>
</p>
<ul>
<li class="level1"><div class="li"> Enterprise software: it’s software that is not designed for individuals, but for big organizations or companies.</div>
</li>
</ul>
<blockquote><div class="no">
 o They help organizations be more effective because of the software that is built especially for businesses. o Many companies end up with unlimited access to a lot of personal information due to this idea of enterprise software. o They still hold the responsibility of keeping this information safe. </div></blockquote>
<ul>
<li class="level1"><div class="li"> Disaster recovery plan</div>
</li>
</ul>
<ol>
<li class="level1 node"><div class="li"> A document which outlines the procedures and protects the business’s data in case a disaster occurs.</div>
<ol>
<li class="level2"><div class="li"> Every company is required to have some form of a disaster recovery plan.</div>
</li>
</ol>
</li>
</ol>
<ul>
<li class="level1"><div class="li"> Parts of a Disaster Recovery Plan</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Backup: Have a backup of your data to make sure that you can restore files and data and be able to return to normal <abbr title="As soon as possible">ASAP</abbr>.</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Mitigation: This is known as the effort to reduce the impact of a disaster by being prepared with backups, checklists, and an emergency plan.</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Monitoring: This can help you prevent any potential risks and keep any eye out for anything that might go wrong.</div>
</li>
</ol>
<ol>
<li class="level1 node"><div class="li"> Redundancy: Having redundant backups is very useful because it reduces the downtime for your company and also allows for a faster recovery period.</div>
<ol>
<li class="level2"><div class="li"> Response: This is known as the emergency response plan. It outlines how the business will respond and what actions they should prioritize to get it up and running again.</div>
</li>
</ol>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> Few Types of backups</div>
<ol>
<li class="level2"><div class="li"> Full backup</div>
</li>
</ol>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Incremental Backup</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Differential Backup</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Mirror Backup</div>
</li>
</ol>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Unit 7 \u2013 Array List&quot;,&quot;hid&quot;:&quot;unit_7_array_list&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:8,&quot;range&quot;:&quot;28510-35228&quot;} -->
<h2 class="sectionedit9" id="unit_8_-_2d_array">Unit 8 - 2D Array</h2>
<div class="level2">

<p>
<strong>From Simple Studies:</strong> <strong><a href="https://simplestudies.edublogs.org/" class="urlextern" target="_blank" title="https://simplestudies.edublogs.org/" rel="ugc nofollow noopener">https://simplestudies.edublogs.org</a></strong> <strong>&amp;</strong>
</p>

<p>
<strong>@simplestudiesinc on Instagram</strong>
</p>

<p>
2D Array
</p>

<p>
<strong>2D Arrays</strong>
</p>
<ul>
<li class="level1 node"><div class="li"> 2D arrays are stored as arrays of arrays.</div>
<ol>
<li class="level2"><div class="li"> 2D arrays are created and indexed similar to 1D array objects.</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> 2D arrays are declared and created with this syntax:</div>
<ol>
<li class="level2"><div class="li"> datatype[][] variableName = new datatype[numberRows][numberCols];</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> 2D array objects that are not rectangular are not part of the course and AP Exam.</div>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> For the purposes of the exam, when accessing the element at arr[first][second]:</div>
<ol>
<li class="level2"><div class="li"> The first index is used for rows, the second index is used for columns.</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> The initializer list used to create and initialize a 2D array consists of initializer lists that represent 1D arrays.</div>
<ol>
<li class="level2"><div class="li"> For example, int[][] ticketInfo = { {45,20,45}, {45,20,45} };</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> The square brackets [row][col] are used to access and modify an element in a 2D array.</div>
</li>
</ul>

<p>
<strong>2D Arrays (continued)</strong>
</p>
<ul>
<li class="level1"><div class="li"> “Row-major order”</div>
</li>
</ul>
<blockquote><div class="no">
 Ordering 2D array elements where traversal occurs across each row While “column-major order” traversal occurs down each column. public class TwoDArrayInitGet { public static void main(String[] args) { String[][] seating = { {“Sarah”, “Maria”}, </div></blockquote>
<blockquote><div class="no">
 {“Cameron”, “Ella”}, {“Emma”, “Luke”} }; String name = seatingInfo[0][0]; System.out.println(name + “ is at [0,0]”); } } </div></blockquote>

<p>
<strong>Traversing 2D Arrays</strong>
</p>
<ul>
<li class="level1"><div class="li"> 2D arrays use nested for loops or nested enhanced for each loop.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Outer loop for a 2D array usually traverses the rows of an array. o The inner loop traverses through the columns.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Nested iteration</div>
</li>
</ul>
<ol>
<li class="level1 node"><div class="li"> Row-major order</div>
<ol>
<li class="level2"><div class="li"> Column-major order</div>
</li>
</ol>
</li>
</ol>
<ul>
<li class="level1"><div class="li"> Standard algorithms for 1-dimensional Arrays can also be used for 2-dimensional Arrays.</div>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Each row must be accessed in a 2D Array for:</div>
<ol>
<li class="level2"><div class="li"> Sequential searches</div>
</li>
</ol>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Linear searches</div>
</li>
</ol>

<p>
The information below is from Runestone Academy and it is specified that this is tested on the AP exam!
</p>
<ul>
<li class="level1"><div class="li"> <strong>2d Array</strong> - An array that holds items in a two-dimensional grid. You can think of it as storing items in rows and columns (like a bingo card or battleship game). You can access an item (element) at a given row and column index.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> <strong>2d Array Declaration</strong> - To declare an array, specify the type of elements that will be stored in the array, then ([][]) to show that it is a 2d array of that type, then at least one space, and then a name for the array. Examples: int[][] seats; String[][] seatingChart;</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> <strong>2d Array Creation</strong> - To create a 2d array, type the name and an equals sign then use the new keyword, followed by a space, then the type, and then [numRows][numCols]. Example: seatingChart = new String[5][4];. This will have 5 rows and 4 columns.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> <strong>2d Array Index</strong> - You can access and set values in a 2d array using the row and column index. The first element in an array called arr is at row 0 and column 0 arr[0][0].</div>
</li>
</ul>

<p>
<strong>Traversing 2D Arrays (continued)</strong>
</p>
<ul>
<li class="level1"><div class="li"> <strong>2d Array Initialization</strong> - You can also initialize (set) the values in the array when you first create it. In this case you don’t need to specify the size of the array, it will be determined from the number of values that you specify.</div>
</li>
</ul>
<blockquote><div class="no">
 Example: String[][] seatingInfo = { {“Jamal”, “Maria”}, {“Jake”, “Suzy”}, {“Emma”, “L uke”}}; This will create a 2d array with 3 rows and 2 columns.</div></blockquote>
<ul>
<li class="level1"><div class="li"> <strong>2d Array Number of Rows</strong> - The number of rows (or height) is the length of the outer array. For an array arr use arr.length to get the number of rows in the array.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> <strong>2d Array Number of Columns</strong> - The number of columns (or width) is the length of the inner array. For an array arr use arr[0].length to get the number of columns.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> <strong>nested for loop</strong> - A for loop inside of another for loop. These are used to loop through all the elements in a 2d array. One loop can work through the rows and the other the columns.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> <strong>out of bounds error</strong> - This happens when a loop goes beyond the last valid index in an array. Remember that the last valid row index is arr.length - 1. The last valid column index is arr[0].length - 1.</div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Unit 8 - 2D Array&quot;,&quot;hid&quot;:&quot;unit_8_-_2d_array&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:9,&quot;range&quot;:&quot;35229-39349&quot;} -->
<h2 class="sectionedit10" id="unit_9_inheritance">Unit 9 – Inheritance</h2>
<div class="level2">

<p>
<strong>From Simple Studies:</strong> <strong><a href="https://simplestudies.edublogs.org/" class="urlextern" target="_blank" title="https://simplestudies.edublogs.org/" rel="ugc nofollow noopener">https://simplestudies.edublogs.org</a></strong> <strong>&amp;</strong>
</p>

<p>
<strong>@simplestudiesinc on Instagram</strong>
</p>

<p>
Inheritance
</p>

<p>
<strong>Creating Superclasses and Subclasses</strong>
</p>
<ul>
<li class="level1"><div class="li"> Class Hierarchy</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Common attributes and behaviors of related classes into a single class called</div>
</li>
</ol>
<blockquote><div class="no">
 a superclass.</div></blockquote>
<ol>
<li class="level1 node"><div class="li"> Classes extend a superclass</div>
<ul>
<li class="level2"><div class="li"> Known as subclasses</div>
</li>
</ul>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> Keyword Extends</div>
<ol>
<li class="level2"><div class="li"> Creating an inheritance relationship</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Class extends only one superclass.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Multiple subclasses can extend a superclass.</div>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Subclass to superclass relationship</div>
<ol>
<li class="level2"><div class="li"> Forms a is-a relationship</div>
</li>
</ol>
</li>
</ul>

<p>
<strong>Writing Constructors for Subclasses</strong>
</p>
<ul>
<li class="level1"><div class="li"> Subclasses inherit private instance variables from the superclass.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Constructors can’t be inherited.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Instance variables are initialized from the parameters passed in the superclass from which we called the constructor.</div>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Superclass constructors continue until an Object constructor is called.</div>
<ol>
<li class="level2"><div class="li"> Doesn’t matter whether it’s called implicitly or explicitly.</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Example (part 1) class Human</div>
</li>
</ul>
<blockquote><div class="no">
 { <pre class="code">  private String name; public Human(String theName) 
{ </pre>

<p>
<br/>
 this.name = theName; 
</p>
<pre class="code">  } public String getName() 
    { return name; 
  }   
public boolean setName(String newName) 
  { 
    if (newName != null) 
  { this.name = newName; return true; </pre>
</div></blockquote>

<p>
  * Example (part 2)
</p>
<blockquote><div class="no">
 } return false; </div></blockquote>

<p>
} 
} 
public class Employee extends Human 
{ private static int nextEmployeeId = 1; private int employeeId; public Employee(String theName) 
{ super(theName); employeeId = nextEmployeeId; nextEmployeeId ++; 
</p>
<blockquote><div class="no">
 <pre class="code">} 
  public int getEmployeeId() 
{ 
  return employeeId; 
} 
  public static void main(String[] args) 
    { 
       Employee emp = new Employee(&quot;Ella&quot;); System.out.println(emp.getName()); System.out.println(emp. getEmployeeId ()); 
     } 
 } </pre>
</div></blockquote>

<p>
<strong>Overriding Methods</strong>
</p>
<ul>
<li class="level1 node"><div class="li"> Overriding methods</div>
<ol>
<li class="level2"><div class="li"> Methods in a subclass have the same method signature.</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Overloading methods</div>
<ol>
<li class="level2"><div class="li"> Multiple methods have the same name but different parameter types</div>
</li>
</ol>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Different order of the parameters</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> OR the number of parameters are different</div>
</li>
</ol>

<p>
<strong>Super Keyword</strong>
</p>
<ul>
<li class="level1"><div class="li"> Two uses of the keyword super o super();</div>
</li>
</ul>
<blockquote><div class="no">
 o super(arguments); o super.method();</div></blockquote>
<ul>
<li class="level1"><div class="li"> Calls the superclass method but not the constructors from the class.</div>
</li>
</ul>

<p>
<strong>Creating References Using Inheritance Hierarchies</strong>
</p>
<ul>
<li class="level1"><div class="li"> Inheritance Hierarchy</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Subclass inheriting from a superclass</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Formed with an object</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Objects at the top of the hierarchy</div>
</li>
</ol>

<p>
<strong>Polymorphism</strong>
</p>
<ul>
<li class="level1"><div class="li"> Compile Time</div>
</li>
</ul>
<ol>
<li class="level1 node"><div class="li"> Methods in the declared type</div>
<ol>
<li class="level2"><div class="li"> Determines the accuracy of a non-static call</div>
</li>
</ol>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> Run Time</div>
<ol>
<li class="level2"><div class="li"> Methods in the object type</div>
</li>
</ol>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Implemented for a non-static call</div>
</li>
</ol>
<ol>
<li class="level1"><div class="li"> Known as polymorphism</div>
</li>
</ol>

<p>
<strong>Object Superclass</strong>
</p>
<ul>
<li class="level1"><div class="li"> Object Class is superclass of all classes in Java o In the built-in java.lang package</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> These are two Object class methods and constructors o String toString()</div>
</li>
</ul>
<blockquote><div class="no">
 o boolean equals(Object other)</div></blockquote>
<ul>
<li class="level1"><div class="li"> Subclasses of Object can override these methods with implementations that are specific to the class.</div>
</li>
</ul>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Unit 9 \u2013 Inheritance&quot;,&quot;hid&quot;:&quot;unit_9_inheritance&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:10,&quot;range&quot;:&quot;39350-42471&quot;} -->
<h2 class="sectionedit11" id="unit_10_recursion">Unit 10 – Recursion</h2>
<div class="level2">

<p>
<strong>From Simple Studies:</strong> <strong><a href="https://simplestudies.edublogs.org/" class="urlextern" target="_blank" title="https://simplestudies.edublogs.org/" rel="ugc nofollow noopener">https://simplestudies.edublogs.org</a></strong> <strong>&amp;</strong>
</p>

<p>
<strong>@simplestudiesinc on Instagram</strong>
</p>

<p>
Recursion
</p>

<p>
<strong>Recursion</strong>
</p>
<ul>
<li class="level1"><div class="li"> Recursion: helpful for solving a problem with similar occurrences.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Recursion Programming: These methods call themselves and solve problems using recursion.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> public static int mystery(int n)</div>
</li>
</ul>
<blockquote><div class="no">
 { if (n &lt; 5) { return n; } else { </div></blockquote>
<blockquote><div class="no">
 int a = n / 5; int b = n % 5; return mystery(a + b); } } What result do you get for the following callings? mystery (3) answer = 3 mystery (20) answer = 2 </div></blockquote>
<ul>
<li class="level1"><div class="li"> Recursive method – method which calls itself</div>
</li>
</ul>

<p>
<strong>Recursion (continued)</strong>
</p>
<ul>
<li class="level1"><div class="li"> Recursive methods</div>
</li>
</ul>
<ol>
<li class="level1"><div class="li"> Contain at least one base case</div>
</li>
</ol>
<ol>
<li class="level1 node"><div class="li"> Halt the recursion</div>
<ol>
<li class="level2"><div class="li"> And contain at least one recursive call</div>
</li>
</ol>
</li>
</ol>
<ul>
<li class="level1 node"><div class="li"> Recursive call should have own set of:</div>
<ol>
<li class="level2"><div class="li"> Local variables (and formal parameters)</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1 node"><div class="li"> Recursive solutions</div>
<ol>
<li class="level2"><div class="li"> Replicated through iterations</div>
</li>
</ol>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> You don’t have to know how to write recursive code for the exam.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Recursion is used to traverse through String, array, and ArrayList objects.</div>
</li>
</ul>

<p>
<strong>What is Recursion?</strong>
</p>
<ul>
<li class="level1"><div class="li"> The binary search algorithm can be composed of either iteratively or recursively written code.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Data must be in sorted order to utilize the binary search algorithm.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> The binary search algorithm begins at the center of an arranged exhibit or ArrayList and eliminates a portion of the cluster or ArrayList until the desired value is found or all elements of the ArrayList have been checked or eliminated from the process.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Binary Search can be more productive than sequential/linear search.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Merge sort is a recursive sorting algorithm that can be utilized to sort components in an Array or ArrayList.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> base case - An approach to stop the recursive calls. This is an arrival without a recursive call.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> call stack - A class characterizes what all objects of that class know (fields) and can do (strategies). You can likewise have information and conduct in the item that speaks to the (class fields and strategies). All objects of a class approach class fields and class techniques, yet these can likewise be gotten to utilizing className.field or className.method().</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> recursive method - A method which contains in any event one call to itself inside the method.</div>
</li>
</ul>

<p>
<strong>Common Mistakes</strong>
</p>
<ul>
<li class="level1"><div class="li"> Missing the recursive call. Make certain to search for a call to a similar technique.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Getting confounded about when a recursive strategy returns and what it returns.</div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> Expecting you comprehend what the recursion is managing without following every last bit of it.</div>
</li>
</ul>
<blockquote><div class="no">
 PRACTICE QUESTIONS</div></blockquote>
<ul>
<li class="level1"><div class="li"> The practice questions shown below are from <a href="https://runestone.academy/runestone/books/published/apcsareview/Recursion/rEasyMC.html" class="urlextern" target="_blank" title="https://runestone.academy/runestone/books/published/apcsareview/Recursion/rEasyMC.html" rel="ugc nofollow noopener">https://runestone.academy/runestone/books/published/apcsareview/Recursion/rEasyMC.h</a> <a href="https://runestone.academy/runestone/books/published/apcsareview/Recursion/rEasyMC.html" class="urlextern" target="_blank" title="https://runestone.academy/runestone/books/published/apcsareview/Recursion/rEasyMC.html" rel="ugc nofollow noopener">tml</a></div>
</li>
</ul>
<ul>
<li class="level1"><div class="li"> The correct answer is filled in for all of these questions.</div>
</li>
</ul>

<p>
<a href="/dokuwiki/lib/exe/detail.php?id=ap_comp_sci_a&amp;media=ilovepdf_merged_cbc28182d00d4e2eaed2e12ac7ea872c:image63.png" class="media" title="ilovepdf_merged_cbc28182d00d4e2eaed2e12ac7ea872c:image63.png"><img src="/dokuwiki/lib/exe/fetch.php?w=400&amp;tok=08abc4&amp;media=ilovepdf_merged_cbc28182d00d4e2eaed2e12ac7ea872c:image63.png" class="media" loading="lazy" alt="" width="400" /></a> PRACTICE QUESTIONS (continued)
</p>

<p>
<a href="/dokuwiki/lib/exe/detail.php?id=ap_comp_sci_a&amp;media=ilovepdf_merged_cbc28182d00d4e2eaed2e12ac7ea872c:image64.png" class="media" title="ilovepdf_merged_cbc28182d00d4e2eaed2e12ac7ea872c:image64.png"><img src="/dokuwiki/lib/exe/fetch.php?w=400&amp;tok=0b990e&amp;media=ilovepdf_merged_cbc28182d00d4e2eaed2e12ac7ea872c:image64.png" class="media" loading="lazy" alt="" width="400" /></a><strong>Citations</strong>
</p>

<p>
<a href="https://runestone.academy/runestone/books/published/apcsareview/Recursion/rEasyMC.html" class="urlextern" target="_blank" title="https://runestone.academy/runestone/books/published/apcsareview/Recursion/rEasyMC.html" rel="ugc nofollow noopener">https://runestone.academy/runestone/books/published/apcsareview/Recursion/rEasyMC.html</a>
</p>

<p>
<a href="https://github.com/ajaygandecha/Youtube-Video-Files/tree/master/AP%20Computer%20Science%20A" class="urlextern" target="_blank" title="https://github.com/ajaygandecha/Youtube-Video-Files/tree/master/AP%20Computer%20Science%20A" rel="ugc nofollow noopener">https://github.com/ajaygandecha/Youtube-Video-</a>
</p>

<p>
Files/tree/master/AP%20Computer%20Science%20A
</p>

<p>
Barron’s Test Prep AP Computer Science A 8th Edition
</p>

</div>
<!-- EDIT{&quot;target&quot;:&quot;section&quot;,&quot;name&quot;:&quot;Unit 10 \u2013 Recursion&quot;,&quot;hid&quot;:&quot;unit_10_recursion&quot;,&quot;codeblockOffset&quot;:0,&quot;secid&quot;:11,&quot;range&quot;:&quot;42472-&quot;} -->